// Programa que conta ate 3
/* 

start:                            -> Label start (address 0)
    mov #0x0100, r1               -> Move o valor no address da memoria 0x0100 para a register r1
    mov 0x0001, r2                -> Move o valor literal 0x0001 (1) para a register r2
    add r1, r2                    -> Adicionar as duas registers
    mov acc, #0x0100              -> Mover o valor guardado na register do acumulador (ACC) para o address de memoria 0x0100
    jne 0x0003, start:            -> Compara o valor do acumulador com 0x0003 (3) e salta para a label start (address 0) se forem diferentes
*/

/*
writableBytes[i++] = instructions.MOV_MEM_REG;
writableBytes[i++] = 0x01;
writableBytes[i++] = 0x00; // 0x0100
writableBytes[i++] = R1;

writableBytes[i++] = instructions.MOV_LIT_REG;
writableBytes[i++] = 0x00;
writableBytes[i++] = 0x01; // 0x0001
writableBytes[i++] = R2;

writableBytes[i++] = instructions.ADD_REG_REG;
writableBytes[i++] = R1;
writableBytes[i++] = R2;

writableBytes[i++] = instructions.MOV_REG_MEM;
writableBytes[i++] = ACC;
writableBytes[i++] = 0x01;
writableBytes[i++] = 0x00; // 0x0100

writableBytes[i++] = instructions.JMP_NOT_EQ;
writableBytes[i++] = 0x00;
writableBytes[i++] = 0x03; // 0x0003
writableBytes[i++] = 0x00; 
writableBytes[i++] = 0x00; // 0x0000 
